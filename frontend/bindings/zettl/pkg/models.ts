// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class KeyBinding {
    "modifiers": string[];
    "code": string;

    /** Creates a new KeyBinding instance. */
    constructor($$source: Partial<KeyBinding> = {}) {
        if (!("modifiers" in $$source)) {
            this["modifiers"] = [];
        }
        if (!("code" in $$source)) {
            this["code"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new KeyBinding instance from a string or object.
     */
    static createFrom($$source: any = {}): KeyBinding {
        const $$createField0_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("modifiers" in $$parsedSource) {
            $$parsedSource["modifiers"] = $$createField0_0($$parsedSource["modifiers"]);
        }
        return new KeyBinding($$parsedSource as Partial<KeyBinding>);
    }
}

export class Snippet {
    "id": number;
    "content": string;
    "copied_at": number;
    "language": string;
    "html": string;

    /** Creates a new Snippet instance. */
    constructor($$source: Partial<Snippet> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("content" in $$source)) {
            this["content"] = "";
        }
        if (!("copied_at" in $$source)) {
            this["copied_at"] = 0;
        }
        if (!("language" in $$source)) {
            this["language"] = "";
        }
        if (!("html" in $$source)) {
            this["html"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Snippet instance from a string or object.
     */
    static createFrom($$source: any = {}): Snippet {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Snippet($$parsedSource as Partial<Snippet>);
    }
}

export class Style {
    "css": string;
    "name": string;

    /** Creates a new Style instance. */
    constructor($$source: Partial<Style> = {}) {
        if (!("css" in $$source)) {
            this["css"] = "";
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Style instance from a string or object.
     */
    static createFrom($$source: any = {}): Style {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Style($$parsedSource as Partial<Style>);
    }
}

export class UISettings {
    "style": Style;
    "toggle_hotkey": KeyBinding;
    "retention_days": number;
    "font_size": number;

    /** Creates a new UISettings instance. */
    constructor($$source: Partial<UISettings> = {}) {
        if (!("style" in $$source)) {
            this["style"] = (new Style());
        }
        if (!("toggle_hotkey" in $$source)) {
            this["toggle_hotkey"] = (new KeyBinding());
        }
        if (!("retention_days" in $$source)) {
            this["retention_days"] = 0;
        }
        if (!("font_size" in $$source)) {
            this["font_size"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UISettings instance from a string or object.
     */
    static createFrom($$source: any = {}): UISettings {
        const $$createField0_0 = $$createType1;
        const $$createField1_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("style" in $$parsedSource) {
            $$parsedSource["style"] = $$createField0_0($$parsedSource["style"]);
        }
        if ("toggle_hotkey" in $$parsedSource) {
            $$parsedSource["toggle_hotkey"] = $$createField1_0($$parsedSource["toggle_hotkey"]);
        }
        return new UISettings($$parsedSource as Partial<UISettings>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = Style.createFrom;
const $$createType2 = KeyBinding.createFrom;
